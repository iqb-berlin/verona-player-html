<script>
  const template = document.createElement('template');
  template.innerHTML = `
<style>
:host {
  margin-bottom: 10px;
  display: grid;
  grid-template-areas: "t t t" "l m r" "b b b";
  grid-template-columns: 5% 90% 5%;
  grid-template-rows: 5% 90% 5%;
  grid-gap: 0;
  font-family: sans-serif;
}

* {
  box-sizing: border-box;
}

#field {
  display: grid;
  grid-template-areas: "a";
  gap: 1px;
  grid-area: m;
  border: 1px solid grey;
}

#field > .field {
  background-color: lime;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

#field > .field:hover {
  background: darkgreen;
}

#field > .field.selected {
  color: silver;
  background: darkred;
}

#field > .field.selected:hover {
  background: red;
}

#label-top {
  grid-area: t
}

#label-bottom {
  grid-area: b
}

#label-left {
  grid-area: l
}

#label-right {
  grid-area: r
}

#label-left,
#label-right,
#label-top,
#label-bottom {
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: x-small;
}

#label-left-content {
  white-space: nowrap;
  transform: rotate(-90deg);
}

#label-right-content {
  transform: rotate(90deg);
  white-space: nowrap;
}
</style>
<div id="label-top"><span id="label-top-content"></span></div>
<div id="label-left"><span id="label-left-content"></span></div>
<div id="field"></div>
<div id="label-right"><span id="label-right-content"></span></div>
<div id="label-bottom"><span id="label-bottom-content"></span></div>
`;

  class FormField extends HTMLElement {
    constructor() {
      super();
      this._shadowRoot = this.attachShadow({
        'mode': 'open'
      });
      this._shadowRoot.appendChild(template.content.cloneNode(true));
      this.$field = this.shadowRoot.querySelector("#field");
      this.$labelTop = this.shadowRoot.querySelector("#label-top-content");
      this.$labelBottom = this.shadowRoot.querySelector("#label-bottom-content");
      this.$labelLeft = this.shadowRoot.querySelector("#label-left-content");
      this.$labelRight = this.shadowRoot.querySelector("#label-right-content");
    }
    static get observedAttributes() {
      return ["size", "label-top", "label-bottom", "label-left", "label-right", "value", "name"];
    }
    attributeChangedCallback(name, oldValue, newValue) {
      switch (name) {
        case "size":
          this._createFields(newValue);
          break;
        case "value":
          this._updateValue(newValue);
          break;
        case "label-top":
          console.log("top", newValue);
          this.$labelTop.innerText = newValue;
          break;
        case "label-bottom":
          this.$labelBottom.innerText = newValue;
          break;
        case "label-left":
          this.$labelLeft.innerText = newValue;
          break;
        case "label-right":
          this.$labelRight.innerText = newValue;
          break;
        default:
          this._updateValue(newValue);
          break;
      }
    }
    _createFields(size) {
      this.$field.innerText = '';
      this.$field.style.gridTemplateAreas = '"' + Array.from({ length: size }).map(_ => 'a').join(' ') + '"';
      const to = (Math.floor(size / 2));
      const from = -1 * to;
      const isOdd = !!(size % 2);
      for (let i = from; i <= to; i++) {
        if (!isOdd && !i) continue;
        for (let j = from; j <= to; j++) {
          if (!isOdd && !j) continue;
          this.$field.appendChild(this._createField(i, j));
        }
      }
    }
    _createField(x, y) {
      const field  = document.createElement('div');
      field.className = 'field';
      field.dataset.value = `${x}, ${y}`;
      field.innerText = `${x}, ${y}`;
      field.addEventListener('click', () => {
        this._updateValue(field.dataset.value);
      });
      return field;
    }
    _updateValue(value) {
      this.$field.querySelectorAll('.field.selected')
        .forEach(field => field.classList.remove('selected'));
      const selectedField = this.$field.querySelector(`.field[data-value="${value}"]`);

      if (!selectedField) {
        console.warn("invalid value", value);
        // todo invalid
        return;
      }
      selectedField.classList.add('selected');

      this.value = value;
    }
  }
  window.customElements.define('db-form-field', FormField);
</script>

<h1>Custom Web-Element</h1>
<db-form-field
    size="5"
    label-top="top"
    label-left="left"
    label-right="right"
    label-bottom="bottom"
    name="yolo"
    value="0, 0"
    style="height: 400px; width: 400px"
></db-form-field>
<hr>
<db-form-field
    size="4"
    label-top="top"
    label-left="left"
    label-right="right"
    label-bottom="bottom"
    name="yolo2"
    value="1, 1"
    style="height: 500px; width: 500px"
></db-form-field>
